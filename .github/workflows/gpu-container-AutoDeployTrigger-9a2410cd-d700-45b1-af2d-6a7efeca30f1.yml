name: Deploy to Google Cloud

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/gpu-container-AutoDeployTrigger-9a2410cd-d700-45b1-af2d-6a7efeca30f1.yml"

  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          token_format: "access_token"
          create_credentials_file: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: "docker-credential-gcr"

      # Set up Redis secrets and configuration
      - name: Configure Redis
        run: |
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> backend/.env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> backend/.env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> backend/.env
          echo "REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}" >> backend/.env

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Build and Push Backend Container
        run: |
          docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/research-assistant/backend:${{ github.sha }} ./backend
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/research-assistant/backend:${{ github.sha }}

      - name: Deploy to Cloud Run
        id: deploy-backend
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: research-assistant-backend
          region: ${{ secrets.GCP_REGION }}
          image: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/research-assistant/backend:${{ github.sha }}
          flags: >-
            --port=8000
            --cpu=2
            --memory=4Gi
            --allow-unauthenticated
            --set-env-vars=ALLOWED_ORIGINS=https://research-assistant.app,https://www.research-assistant.app,REDIS_HOST=${{ secrets.REDIS_HOST }},REDIS_PORT=${{ secrets.REDIS_PORT }},REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }},REDIS_USERNAME=${{ secrets.REDIS_USERNAME }},FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }},STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }},STRIPE_PRO_PRICE_ID=${{ secrets.STRIPE_PRO_PRICE_ID }},STRIPE_PLUS_PRICE_ID=${{ secrets.STRIPE_PLUS_PRICE_ID }}
            --startup-cpu-boost
            --min-instances=1
            --timeout=300

            - name: Setup Node.js
            uses: actions/setup-node@v3
            with:
              node-version: "18"
              cache: 'npm'
              cache-dependency-path: frontend/package-lock.json
          

      # Create frontend environment variables including the backend URL
      - name: Create Frontend Environment
        run: |
          echo "REACT_APP_API_URL=${{ steps.deploy-backend.outputs.url }}" >> frontend/.env
          echo "REACT_APP_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> frontend/.env
          echo "REACT_APP_FIREBASE_AUTH_DOMAIN=summarization-3a05c.firebaseapp.com" >> frontend/.env
          echo "REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> frontend/.env
          echo "REACT_APP_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> frontend/.env

      - name: Build Frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      # Deploy to Cloud Storage instead of Firebase
      - name: Deploy Frontend to Cloud Storage
        run: |
          gsutil -m rsync -r frontend/build ${{ secrets.GCP_STORAGE_BUCKET }}
          gsutil -m setmeta -h "Cache-Control:public, max-age=3600" ${{ secrets.GCP_STORAGE_BUCKET }}/**/*.html
          gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" ${{ secrets.GCP_STORAGE_BUCKET }}/**/*.{css,js,jpg,jpeg,png,gif,svg}