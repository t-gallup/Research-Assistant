name: Deploy to AWS

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/gpu-container-AutoDeployTrigger-9a2410cd-d700-45b1-af2d-6a7efeca30f1.yml"
      - "amplify.yml"

  workflow_dispatch:

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Update Amplify environment variable with backend URL and Firebase config
      - name: Update Amplify Environment Variables
        run: |
          aws amplify update-app \
            --app-id ${{ secrets.AWS_AMPLIFY_APP_ID }} \
            --environment-variables "REACT_APP_API_URL=${{ secrets.AWS_INVOKE_URL }},REACT_APP_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }},REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }},REACT_APP_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}"

  deploy-backend:
    runs-on: ubuntu-latest
    needs: deploy-frontend
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up Firebase Admin SDK credentials - improved version with verification
      - name: Setup Firebase Credentials
        run: |
          echo '${{ secrets.FIREBASE_ADMIN_SDK_JSON }}' > backend/firebase-adminsdk.json
          # Verify the file exists and has content
          if [ ! -s backend/firebase-adminsdk.json ]; then
            echo "Error: Firebase credentials file is empty or not created correctly"
            exit 1
          fi
          # Print the file size and first few characters to verify it exists (redacting sensitive data)
          echo "Firebase credentials file created, size: $(wc -c < backend/firebase-adminsdk.json) bytes"
          echo "File starts with: $(head -c 20 backend/firebase-adminsdk.json | sed 's/./*/g')"
          # Set proper permissions
          chmod 644 backend/firebase-adminsdk.json
    
      # Set up Redis connection - create a free Redis database
      - name: Setup Redis Database
        id: setup-redis
        run: |
          # Check if any existing Redis exists by checking for environment variable
          if [ -z "${{ secrets.REDIS_HOST }}" ]; then
            echo "Setting up a new Redis database using local Docker container"
            
            # Set up a local Redis service just for testing
            # This ensures we have a Redis instance even if setup fails
            echo "REDIS_HOST=localhost" >> $GITHUB_ENV
            echo "REDIS_PORT=6379" >> $GITHUB_ENV
            echo "REDIS_PASSWORD=" >> $GITHUB_ENV
            echo "REDIS_USERNAME=" >> $GITHUB_ENV
            
            # Start local Redis service
            docker run -d --name redis -p 6379:6379 redis:alpine
          else
            echo "Using existing Redis configuration"
            # Use the existing Redis configuration
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> $GITHUB_ENV
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> $GITHUB_ENV
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> $GITHUB_ENV
            echo "REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}" >> $GITHUB_ENV
          fi

      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Create ECR repository if it doesn't exist
      - name: Create ECR Repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names research-assistant || \
          aws ecr create-repository --repository-name research-assistant

      # Build and push Docker image to ECR - improved with explicit Firebase file handling
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: research-assistant
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Print directory contents before build (for debugging)
          echo "Contents of backend directory:"
          ls -la backend/
          
          # Build Docker image with explicit Firebase credential handling
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            ./backend
          
          # Tag and push the images
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_ENV
          
      # Remove existing Lambda function if it exists - this is needed to change package type
      - name: Delete existing Lambda function if it exists
        run: |
          # Try to delete the function, but don't fail if it doesn't exist
          aws lambda delete-function --function-name research-assistant-backend || true
          # Wait to ensure deletion is complete
          sleep 5
      
      # Create new Lambda function with container image and improved environment
      - name: Create Lambda function with container image
        run: |
          # Set the Lambda role ARN directly
          LAMBDA_ROLE_ARN="arn:aws:iam::$(aws sts get-caller-identity --query 'Account' --output text):role/research-assistant-lambda-role"
          
          echo "Using existing Lambda role: $LAMBDA_ROLE_ARN"
          
          # Check if Lambda function exists
          FUNCTION_EXISTS=$(aws lambda get-function --function-name research-assistant-backend 2>/dev/null || echo "not_found")
          
          if [[ "$FUNCTION_EXISTS" != "not_found" ]]; then
            # Update existing function
            echo "Updating existing Lambda function..."
            aws lambda update-function-code \
              --function-name research-assistant-backend \
              --image-uri ${{ env.IMAGE_URI }}
            
            # Update function configuration
            aws lambda update-function-configuration \
              --function-name research-assistant-backend \
              --timeout 300 \
              --memory-size 2048 \
              --environment "Variables={DEPLOYMENT=aws,ENVIRONMENT=production,REDIS_HOST=${{ env.REDIS_HOST }},REDIS_PORT=${{ env.REDIS_PORT }},REDIS_PASSWORD=${{ env.REDIS_PASSWORD }},REDIS_USERNAME=${{ env.REDIS_USERNAME }},FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }},STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }},STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }},STRIPE_PRO_PRICE_ID=${{ secrets.STRIPE_PRO_PRICE_ID }},STRIPE_PLUS_PRICE_ID=${{ secrets.STRIPE_PLUS_PRICE_ID }},OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},AZURE_SPEECH_KEY=${{ secrets.AZURE_SPEECH_KEY }},GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }},SEARCH_ENGINE_ID=${{ secrets.SEARCH_ENGINE_ID }}}"
          else
            # Create new function with existing role
            echo "Creating new Lambda function..."
            aws lambda create-function \
              --function-name research-assistant-backend \
              --package-type Image \
              --code ImageUri=${{ env.IMAGE_URI }} \
              --role "$LAMBDA_ROLE_ARN" \
              --timeout 300 \
              --memory-size 2048 \
              --environment "Variables={DEPLOYMENT=aws,ENVIRONMENT=production,REDIS_HOST=${{ env.REDIS_HOST }},REDIS_PORT=${{ env.REDIS_PORT }},REDIS_PASSWORD=${{ env.REDIS_PASSWORD }},REDIS_USERNAME=${{ env.REDIS_USERNAME }},FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }},STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }},STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }},STRIPE_PRO_PRICE_ID=${{ secrets.STRIPE_PRO_PRICE_ID }},STRIPE_PLUS_PRICE_ID=${{ secrets.STRIPE_PLUS_PRICE_ID }},OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},AZURE_SPEECH_KEY=${{ secrets.AZURE_SPEECH_KEY }},GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }},SEARCH_ENGINE_ID=${{ secrets.SEARCH_ENGINE_ID }}}"
          fi

          # Wait for function update to complete
          echo "Waiting for function update to complete..."
          sleep 10

      # Add function URL configuration and add permissions for it
      - name: Add Lambda function URL with public access
        run: |
          # Create function URL with no auth
          aws lambda create-function-url-config \
            --function-name research-assistant-backend \
            --auth-type NONE \
            --cors "{\"AllowOrigins\":[\"*\"],\"AllowMethods\":[\"*\"],\"AllowHeaders\":[\"*\"],\"ExposeHeaders\":[\"*\"],\"MaxAge\":86400}" || true
            
          # Add public access permission
          aws lambda add-permission \
            --function-name research-assistant-backend \
            --action lambda:InvokeFunctionUrl \
            --statement-id FunctionURLAllowPublicAccess \
            --principal "*" \
            --function-url-auth-type NONE || true
          
          # Get the function URL
          FUNCTION_URL=$(aws lambda get-function-url-config \
            --function-name research-assistant-backend \
            --query 'FunctionUrl' --output text)
            
          echo "Lambda Function URL: $FUNCTION_URL"
