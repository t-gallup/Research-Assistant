name: Deploy to AWS

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/gpu-container-AutoDeployTrigger-9a2410cd-d700-45b1-af2d-6a7efeca30f1.yml"
      - "amplify.yml"

  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up Firebase Admin SDK credentials
      - name: Setup Firebase Credentials
        run: |
          echo '${{ secrets.FIREBASE_ADMIN_SDK_JSON }}' > backend/firebase-adminsdk.json

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Create ECR repository if it doesn't exist
      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names research-assistant-backend || \
          aws ecr create-repository --repository-name research-assistant-backend

      # Build and push backend Docker image
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/research-assistant-backend:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/research-assistant-backend:latest
      
      - name: Fill environment variables in task definition template
        run: |
          # Copy the template
          cp .github/task-definition-template.json task-definition-base.json
          
          # Use jq to safely replace values
          jq --arg role_arn "${{ secrets.ECS_EXECUTION_ROLE_ARN }}" \
              --arg task_role "${{ secrets.ECS_TASK_ROLE_ARN }}" \
              --arg redis_host "${{ secrets.REDIS_HOST }}" \
              --arg redis_port "${{ secrets.REDIS_PORT }}" \
              --arg redis_pwd "${{ secrets.REDIS_PASSWORD }}" \
              --arg redis_user "${{ secrets.REDIS_USERNAME }}" \
              --arg firebase_id "${{ secrets.FIREBASE_PROJECT_ID }}" \
              --arg stripe_key "${{ secrets.STRIPE_SECRET_KEY }}" \
              --arg stripe_hook "${{ secrets.STRIPE_WEBHOOK_SECRET }}" \
              --arg stripe_pro "${{ secrets.STRIPE_PRO_PRICE_ID }}" \
              --arg stripe_plus "${{ secrets.STRIPE_PLUS_PRICE_ID }}" \
              --arg openai_key "${{ secrets.OPENAI_API_KEY }}" \
              --arg azure_key "${{ secrets.AZURE_SPEECH_KEY }}" \
              --arg aws_region "${{ secrets.AWS_REGION }}" \
              '.executionRoleArn = $role_arn | 
              .taskRoleArn = $task_role | 
              .containerDefinitions[0].environment = [
                {name: "DEPLOYMENT", value: "aws"},
                {name: "ENVIRONMENT", value: "production"},
                {name: "REDIS_HOST", value: $redis_host},
                {name: "REDIS_PORT", value: $redis_port},
                {name: "REDIS_PASSWORD", value: $redis_pwd},
                {name: "REDIS_USERNAME", value: $redis_user},
                {name: "FIREBASE_PROJECT_ID", value: $firebase_id},
                {name: "STRIPE_SECRET_KEY", value: $stripe_key},
                {name: "STRIPE_WEBHOOK_SECRET", value: $stripe_hook},
                {name: "STRIPE_PRO_PRICE_ID", value: $stripe_pro},
                {name: "STRIPE_PLUS_PRICE_ID", value: $stripe_plus},
                {name: "OPENAI_API_KEY", value: $openai_key},
                {name: "AZURE_SPEECH_KEY", value: $azure_key}
              ] |
              .containerDefinitions[0].logConfiguration.options."awslogs-region" = $aws_region' \
              task-definition-base.json > task-definition-modified.json

        
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-modified.json
          container-name: research-assistant-backend
          image: ${{ steps.login-ecr.outputs.registry }}/research-assistant-backend:latest

      # Deploy backend to ECS (for GPU support) instead of Lambda
      - name: Deploy to ECS
        run: |
          # Create or update ECS task definition
          cat > task-definition.json << EOF
          {
            "family": "research-assistant-backend",
            "networkMode": "awsvpc",
            "executionRoleArn": "${{ secrets.ECS_EXECUTION_ROLE_ARN }}",
            "taskRoleArn": "${{ secrets.ECS_TASK_ROLE_ARN }}",
            "containerDefinitions": [
              {
                "name": "research-assistant-backend",
                "image": "${{ steps.login-ecr.outputs.registry }}/research-assistant-backend:latest",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 8000,
                    "hostPort": 8000,
                    "protocol": "tcp"
                  }
                ],
                "environment": [
                  {"name": "DEPLOYMENT", "value": "aws"},
                  {"name": "ENVIRONMENT", "value": "production"},
                  {"name": "REDIS_HOST", "value": "${{ secrets.REDIS_HOST }}"},
                  {"name": "REDIS_PORT", "value": "${{ secrets.REDIS_PORT }}"},
                  {"name": "REDIS_PASSWORD", "value": "${{ secrets.REDIS_PASSWORD }}"},
                  {"name": "REDIS_USERNAME", "value": "${{ secrets.REDIS_USERNAME }}"},
                  {"name": "FIREBASE_PROJECT_ID", "value": "${{ secrets.FIREBASE_PROJECT_ID }}"},
                  {"name": "STRIPE_SECRET_KEY", "value": "${{ secrets.STRIPE_SECRET_KEY }}"},
                  {"name": "STRIPE_WEBHOOK_SECRET", "value": "${{ secrets.STRIPE_WEBHOOK_SECRET }}"},
                  {"name": "STRIPE_PRO_PRICE_ID", "value": "${{ secrets.STRIPE_PRO_PRICE_ID }}"},
                  {"name": "STRIPE_PLUS_PRICE_ID", "value": "${{ secrets.STRIPE_PLUS_PRICE_ID }}"},
                  {"name": "OPENAI_API_KEY", "value": "${{ secrets.OPENAI_API_KEY }}"},
                  {"name": "AZURE_SPEECH_KEY", "value": "${{ secrets.AZURE_SPEECH_KEY }}"}
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/research-assistant-backend",
                    "awslogs-region": "${{ secrets.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                },
                "healthCheck": {
                  "command": ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"],
                  "interval": 30,
                  "timeout": 5,
                  "retries": 3,
                  "startPeriod": 60
                }
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "1024",
            "memory": "2048",
            "runtimePlatform": {
              "cpuArchitecture": "X86_64",
              "operatingSystemFamily": "LINUX"
            }
          }
          EOF
          
          # Register the task definition
          aws ecs register-task-definition --cli-input-json file://task-definition.json
          
          # Update the service with the new task definition
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service research-assistant-backend \
            --task-definition research-assistant-backend \
            --force-new-deployment

      # Configure API Gateway if it doesn't exist yet
      - name: Configure API Gateway
        run: |
          # Check if API exists
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='research-assistant-api'].id" --output text)
          
          if [ -z "$API_ID" ]; then
            echo "Creating new API Gateway..."
            API_ID=$(aws apigateway create-rest-api --name research-assistant-api --query "id" --output text)
            
            # Get root resource id
            ROOT_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[?path=='/'].id" --output text)
            
            # Create resource
            RESOURCE_ID=$(aws apigateway create-resource --rest-api-id $API_ID --parent-id $ROOT_ID --path-part "api" --query "id" --output text)
            
            # Create ANY method
            aws apigateway put-method --rest-api-id $API_ID --resource-id $RESOURCE_ID --http-method ANY --authorization-type NONE
            
            # Create integration with the NLB
            aws apigateway put-integration \
              --rest-api-id $API_ID \
              --resource-id $RESOURCE_ID \
              --http-method ANY \
              --type HTTP_PROXY \
              --integration-http-method ANY \
              --uri http://${{ secrets.NLB_DNS }}/api \
              --connection-type INTERNET
            
            # Deploy the API
            aws apigateway create-deployment --rest-api-id $API_ID --stage-name prod
            
            # Enable CORS
            aws apigateway put-method-response \
              --rest-api-id $API_ID \
              --resource-id $RESOURCE_ID \
              --http-method ANY \
              --status-code 200 \
              --response-parameters "method.response.header.Access-Control-Allow-Origin=true"
            
            echo "API Gateway created: https://$API_ID.execute-api.${{ secrets.AWS_REGION }}.amazonaws.com/prod"
          else
            echo "API Gateway already exists: $API_ID"
          fi
          
          # Store the API URL for frontend config
          API_URL="https://$API_ID.execute-api.${{ secrets.AWS_REGION }}.amazonaws.com/prod"
          echo "API_URL=$API_URL" >> $GITHUB_ENV

      # Update Amplify Environment Variables
      - name: Update Amplify Environment Variables
        run: |
          aws amplify update-app --app-id ${{ secrets.AWS_AMPLIFY_APP_ID }} \
            --environment-variables \
            REACT_APP_API_URL=${{ env.API_URL }},\
            REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }},\
            REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }},\
            REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}

  # Frontend deployment through Amplify
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Trigger Amplify rebuild
      - name: Trigger Amplify rebuild
        run: |
          aws amplify start-job \
            --app-id ${{ secrets.AWS_AMPLIFY_APP_ID }} \
            --branch-name main \
            --job-type RELEASE